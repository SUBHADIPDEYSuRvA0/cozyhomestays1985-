<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Property Location Form - Stylish Layout</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" />
  <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
  <style>
    /* Reset some basic styling */
    body, html {
      height: 100%;
      margin: 0;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(135deg, #ffffff, #ffffff);
      color: #333;
    }

    /* Container with shadow and rounded corners */
    .container-custom {
      max-width: 1100px;
      margin: 40px auto;
      background: #fff;
      border-radius: 20px;
      box-shadow: 0 25px 45px rgba(0,0,0,0.15);
      display: flex;
      overflow: hidden;
      height: 680px;
      user-select: none;
    }

    /* Left side: form */
    .form-side {
      flex: 1;
      padding: 40px 50px;
      overflow-y: auto;
      background: #fafafa;
      display: flex;
      flex-direction: column;
      justify-content: center;
    }

    .form-side h4 {
      font-weight: 700;
      margin-bottom: 30px;
      color: #000000;
      letter-spacing: 1px;
    }

    .form-label {
      font-weight: 600;
      color: #000000;
    }

    .form-control {
      border-radius: 10px;
      border: 1.5px solid #ccc;
      transition: border-color 0.3s ease;
    }

    .form-control:focus {
      border-color: #ffffff;
      box-shadow: 0 0 10px rgba(255, 255, 255, 0.3);
      outline: none;
    }

    /* button[type="submit"] {
      background: #011f46;
      border: none;
      padding: 14px 0;
      font-weight: 700;
      font-size: 1.1rem;
      border-radius: 12px;
      margin-top: 25px;
      cursor: pointer;
      transition: background 0.3s ease;
    } */

    /* button[type="submit"]:hover {
      background: #ffffff;
    } */

    /* Right side: map and search */
    .map-side {
      flex: 1.15;
      position: relative;
      background: linear-gradient(135deg, #ffffff, #a1a1a1);
      display: flex;
      flex-direction: column;
      padding: 30px 40px 40px;
    }

    #searchBox {
      border-radius: 10px;
      padding: 12px 15px;
      font-size: 1rem;
      border: none;
      margin-bottom: 20px;
      box-shadow: 0 3px 15px rgba(0,0,0,0.2);
    }

    #searchBox:focus {
      outline: none;
      box-shadow: 0 0 12px 3px rgba(0, 21, 65, 0.8);
    }

    label[for="searchBox"] {
      color: #000000;
      font-weight: 600;
      margin-bottom: 8px;
      user-select: none;
    }

    #map {
      flex-grow: 1;
      border-radius: 20px;
      box-shadow: 0 20px 35px rgba(0, 0, 0, 0.4);
    }

    .autocomplete-suggestions {
      position: absolute;
      z-index: 1050;
      top: 70px;
      left: 40px;
      right: 40px;
      background: #fff;
      border-radius: 12px;
      box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
      max-height: 250px;
      overflow-y: auto;
      font-size: 0.95rem;
    }

    .autocomplete-suggestions div {
      padding: 12px 18px;
      cursor: pointer;
      color: #000000;
      font-weight: 600;
      border-bottom: 1px solid #eee;
      transition: background-color 0.2s ease;
    }

    .autocomplete-suggestions div:hover {
      background-color: #ffffff;
      color: white;
    }

    /* Scrollbar styling for suggestions */
    .autocomplete-suggestions::-webkit-scrollbar {
      width: 6px;
    }
    .autocomplete-suggestions::-webkit-scrollbar-thumb {
      background: #ffffff;
      border-radius: 3px;
    }

    /* Responsive tweaks */
    @media (max-width: 991px) {
      .container-custom {
        flex-direction: column;
        height: auto;
      }
      .map-side, .form-side {
        flex: none;
        padding: 25px;
        height: 450px;
      }
      #map {
        height: 100%;
      }
      .autocomplete-suggestions {
        top: 55px;
        left: 25px;
        right: 25px;
      }
    }
     header {
      position: fixed;
      top: 0; left: 0; right: 0;
      height: 60px;
      background: #001f4d;
      color: white;
      display: flex;
      align-items: center;
      padding: 0 2rem;
      font-weight: 600;
      font-size: 1.5rem;
      z-index: 1000;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }

    footer {
      position: fixed;
      bottom: 0; left: 0; right: 0;
      background: white;
      height: 70px;
      box-shadow: 0 -2px 8px rgba(0,0,0,0.1);
      padding: 0 2rem;
      display: flex;
      align-items: center;
      justify-content: space-between;
      z-index: 1000;
    }

    .progress-bar-container {
      position: fixed;
      bottom: 70px;
      left: 0; right: 0;
      height: 10px;
      background: #fff;
      box-shadow: inset 0 0 6px #000;
      border: 1px solid #000;
      border-radius: 10px;
      overflow: hidden;
      max-width: 100vw;
      z-index: 1100;
    }

    .progress-water-fill {
      height: 100%;
      width: 25%;
      background: linear-gradient(270deg, #000, #000000, #000);
      background-size: 600% 600%;
      animation: waveAnimation 8s linear infinite;
      border-radius: 10px 0 0 10px;
      position: relative;
      overflow: hidden;
    }

    .progress-water-fill::before {
      content: '';
      position: absolute;
      top: -15px;
      left: 0;
      width: 200%;
      height: 30px;
      background: rgba(0, 0, 0, 0.6);
      border-radius: 40%;
      animation: waveMotion 4s linear infinite;
      filter: blur(1.5px);
      opacity: 0.7;
    }

    @keyframes waveAnimation {
      0% { background-position: 0% 50%; }
      100% { background-position: 100% 50%; }
    }

    @keyframes waveMotion {
      0% { transform: translateX(0); }
      100% { transform: translateX(-50%); }
    }

    main {
      position: fixed;
      top: 60px;
      bottom: 70px;
      left: 0; right: 0;
      display: flex;
      justify-content: center;
      align-items: center;
      padding: 1rem;
    }

    .content-wrapper {
      display: flex;
      width: 100%;
      max-width: 1200px;
      justify-content: space-between;
      align-items: center;
      flex-wrap: wrap;
    }

    .lottie-container {
      flex: 1;
      display: flex;
      justify-content: center;
      align-items: center;
      min-width: 300px;
    }

    .lottie-container dotlottie-player {
      height: 80vh;
      width: auto;
    }

    .text-container {
      flex: 1;
      padding: 2rem;
      min-width: 300px;
    }

    .text-container h1 {
      font-size: 3rem;
      font-weight: bold;
      color: #001f4d;
    }

    .text-container p {
      font-size: 1.25rem;
      color: #444;
      margin-top: 1rem;
    }

    .btn-next,
    .btn-back {
      padding: 0.6rem 1.8rem;
      font-size: 1.1rem;
      border: none;
      border-radius: 9999px;
      cursor: pointer;
      transition: background-color 0.3s ease;
      min-width: 100px;
      font-weight: 600;
    }

    .btn-next {
      background-color: #000;
      color: #fff;
    }

    .btn-next:hover {
      background-color: #333;
    }

    .btn-back {
      background-color: #e0e0e0;
      color: #000;
    }

    .btn-back:hover {
      background-color: #ccc;
    }
  </style>
</head>
<body>
<header>CozyHomeStays</header>
   <main>
  <div class="container-custom">
    <!-- Form area -->
     <header>CozyHomeStays</header><div class="form-side">
      <h4>Add Property Location</h4>
      <% if (map ) { %>
    <form action="/host/property/<%= propertyId %>/createAddress" method="POST">
        <div class="mb-4">
          <label for="propertyName" class="form-label" >Property Name</label>
          <input type="text" id="propertyName" class="form-control" name="propertyName" placeholder="<%= map.propertyName || 'Enter property name' %>" value="<%= map.propertyName %>"  required>
        </div>
        <div class="mb-4">
          <label for="nearby" class="form-label">Nearby Location (e.g., Landmark, School, Mall)</label>
          <input type="text" id="nearby" class="form-control" name="nearby" placeholder="<%= map.nearby || 'Enter nearby location' %>" value="<%= map.nearby %>">
        </div>
        <div class="mb-4">
          <label for="fullAddress" class="form-label">Full Address</label>
          <input type="text" id="mapAddress" class="form-control" name="fullAddress" placeholder="<%= map.fullAddress || 'Enter full address' %>" value="<%= map.fullAddress %>">
        </div>
        <div class="mb-4">
          <label for="fullAddress" class="form-label">Map Address(Scearch Through Map For Exact Location)</label>
          <input type="text" id="fullAddress" name="mapAddress" class="form-control" placeholder="<%= map.mapAddress || 'Enter map address' %>" value="<%= map.mapAddress %>" >
        </div>

        <div class="row mb-4">
          <div class="col-md-4 mb-3 mb-md-0">
            <label for="city" class="form-label">City</label>
            <input type="text" id="city" name="city" class="form-control" placeholder="<%= map.city || 'Enter city' %>" value="<%= map.city %>" >
          </div>
          <div class="col-md-4 mb-3 mb-md-0">
            <label for="state" class="form-label">State</label>
            <input type="text" id="state" name="state" class="form-control" placeholder="<%= map.state || 'Enter state' %>" value="<%= map.state %>" >
          </div>
          <div class="col-md-4">
            <label for="pincode" class="form-label">Pincode</label>
            <input type="text" id="pincode" name="pincode" class="form-control" placeholder="<%= map.pincode || 'Enter pincode' %>" value="<%= map.pincode %>" >
          </div>
        </div>

        <div class="row mb-4">
          <div class="col-md-6 mb-3 mb-md-0">
            <label for="latitude" class="form-label">Latitude</label>
            <input type="text" id="latitude" name="latitude" class="form-control" placeholder="<%= map.latitude || 'Enter latitude' %>" value="<%= map.latitude %>" readonly>
          </div>
          <div class="col-md-6">
            <label for="longitude" class="form-label">Longitude</label>
            <input type="text" id="longitude" name="longitude" class="form-control" placeholder="<%= map.longitude || 'Enter longitude' %>" value="<%= map.longitude %>" readonly>
          </div>
        </div>

        <!-- <button type="submit" class="btn btn-primary w-100">Submit</button> -->
     
    </div>

    <!-- Map area -->
    <div class="map-side">
      <label for="searchBox">Search by Pincode, City, State or Country</label>
      <input type="text" id="searchBox" placeholder="E.g. Kolkata, 700001, West Bengal" autocomplete="off" />
      <div id="suggestions" class="autocomplete-suggestions"></div>
      <div id="map"></div>
    </div>
  </div>
   <div class="progress-bar-container" role="progressbar" aria-valuenow="15" aria-valuemin="0" aria-valuemax="100">
        <div class="progress-water-fill"></div>
      </div>
 <footer>
        <a href="/host/selectcategory" class="btn-back" >Back</a>
        <button type="submit" class="btn-next">Next</button>
      </footer>
    
    </form>
  <%} %>
</main> 
  <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
  <script>
    const map = L.map('map').setView([22.5726, 88.3639], 12); // Kolkata default

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '&copy; OpenStreetMap contributors'
    }).addTo(map);

    let marker = null;

    function fillForm(lat, lon, address, extra = {}) {
      document.getElementById('latitude').value = lat;
      document.getElementById('longitude').value = lon;
      document.getElementById('fullAddress').value = address;
      document.getElementById('city').value = extra.city || '';
      document.getElementById('state').value = extra.state || '';
      document.getElementById('pincode').value = extra.postcode || '';
    }

    map.on('click', async function(e) {
      const lat = e.latlng.lat;
      const lon = e.latlng.lng;

      if (marker) map.removeLayer(marker);
      marker = L.marker([lat, lon]).addTo(map);

      const res = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lon}&addressdetails=1`);
      const data = await res.json();
      const address = data.display_name || "Unknown location";
      const addr = data.address || {};

      fillForm(lat, lon, address, {
        city: addr.city || addr.town || addr.village || '',
        state: addr.state || '',
        postcode: addr.postcode || ''
      });

      marker.bindPopup(address).openPopup();
    });

    const searchBox = document.getElementById('searchBox');
    const suggestionsBox = document.getElementById('suggestions');

    searchBox.addEventListener('input', async () => {
      const query = searchBox.value.trim();
      suggestionsBox.innerHTML = '';
      if (!query) return;

      try {
        const res = await fetch(`https://photon.komoot.io/api/?q=${encodeURIComponent(query)}`);
        const data = await res.json();

        data.features.forEach(item => {
          const { name, city, state, country, postcode } = item.properties;
          const [lon, lat] = item.geometry.coordinates;
          const full = `${name || ''}, ${city || ''}, ${state || ''}, ${country || ''} ${postcode || ''}`;
          const div = document.createElement('div');
          div.textContent = full;
          div.addEventListener('click', async () => {
            searchBox.value = full;
            suggestionsBox.innerHTML = '';

            if (marker) map.removeLayer(marker);
            marker = L.marker([lat, lon]).addTo(map);
            map.setView([lat, lon], 14);

            const res = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lon}&addressdetails=1`);
            const data = await res.json();
            const addr = data.address || {};
            const fullAddress = data.display_name || full;

            fillForm(lat, lon, fullAddress, {
              city: addr.city || addr.town || addr.village || '',
              state: addr.state || '',
              postcode: addr.postcode || ''
            });

            marker.bindPopup(fullAddress).openPopup();
          });
          suggestionsBox.appendChild(div);
        });
      } catch (error) {
        console.error('Error fetching location suggestions:', error);
      }
    });
  </script>

</body>
</html>
